2003-06-26
  Someone in our Operations Dept. noticed (after 3 years) that the day
of week in the page headings on TAPEMAP was incorrect (off by one day).
After downloading the latest version of TAPEMAP from the web site
(CBT460), I found that the latest version was off by 3 days!
  Obviously the simplest fix would be to just remove the day of week
from the heading information, as its function is purely cosmetic.
However, I've done much work with date routines in the past and never
liked mysteries, so instead I decided to waste a few hours solving the
problem.
  Looking at the TAPEMAP code, the algorithm for day-of-week was very
obscure and complex compared with other techniques I have used.  A +2
kludge patch was added in 2000, and this may very well have worked for
that year, but it obviously did not solve the problem for later years.
  I replaced the day-of-week code in 'TODAY' with a shorter, simpler
algorithm based on Lilian dates and code that I introduced at
Data-Tronics in 1991, an algorithm that was known to be Y2K compliant
and straight-forward enough to demonstrate correctness.  The
accompanying version of TAPEMAP includes those changes.

                            -----
  I found the original algorithm interesting as an intellectual
challenge.  I have since, with the help of REXX, managed to analyze what
was broken by Y2K in the original algorithm used in TAPEMAP and have
figured out how to fix that algorithm; but that makes the original
algorithm even longer and perhaps even more obscure.  For the sake of
the equally curious I am including my analysis of the original
algorithm.

  Restatement of original algorithm:
For a date ccyy/mm/dd,  calculate
  mx = Mod(mm+9,12) + 1  (convert month ordinal to 11,12,1,2,...,10)
  If mx > 10 (Jan or Feb) Then yx = yy - 1
                          Else yx = yy
  Using integer arithmetic (discard remainders),
  b = yx/4
  D = (13*mx -1)/5  + b + cc/4 + dd + yx - 2*cc
  DayofWeekOrdinal = Mod(D,7) + 1  (1=Sun,..., 7=Sat)

  There are actually two separate problems that occur on transition from
1999 to 2000.  The term yx becomes negative for Jan and Feb of 2000,
which causes inconsistent results for yx/4.  This can be fixed by
instead calculating (REXX code)
  If yx < 0 Then b = -1
            Else b = Trunc(yx/4, 0)
  The second problem is also sign related.  In 2000 the term '-2*cc'
combined with yx becoming small forces D negative, which invalidates the
code that is attempting to evaluate 'Mod(D,7)'.  One way to correct this
is by replacing the '-2*cc' term with '+5*cc', which is mathematically
equivalent in this context.  This is the same as adding '7*cc', which is
the same as 0 mod 7, leaving the end result unchanged.

  The deeper puzzle is how to demonstrate that the original (or
modified form) of the algorithm makes sense, as it does not appear
to have any obvious derivation from the Gregorian calendar.  After
several days of staring at this creation I came to the following
intuitive but non rigorous arguments:
  Assuming that only the 'yy' part of the date changes, the number
of days in a normal (nonleap) year is 365 and mod(365,7) = 1, so it
is reasonable (subject to leap year correction) that the day ordinal
should increase by 1 mod 7 each time yy increases by 1.
  Assuming only the 'dd' part of the date changes, each time 'dd'
advances by one, the day-of-week ordinal should also advance by
1 mod 7, so the addition of 'dd' in 'D' makes sense.
  Each time a leap year occurs, the day ordinal needs an extra +1
bump.  The 'b' term adds this extra bump every 4 years, with the
strange '-1' offset to yx in Jan and Feb delaying the bump for those
months by one year.  There is another mechanism (hidden in the '-2*cc')
that subtracts off 1 for century years, so the 'cc/4' adds the bump
back in for centuries evenly divisible by 400.
  The (13*mx -1)/5 term is very obscure.  I don't see any way to
derive this by rational argument, but one can prove empirically that
it works based on the cumulative days in the year preceding the first
day of each month.  For non leap years:
Month  PD=PriorDays  Mod(PD,7)   mx   (13*mx-1)/5 +yx effect  mod 7
Jan         0           0        11      28           28        0
Feb        31           3        12      31           31        3
Mar        59           3         1       2            3        3
Apr        90           6         2       5            6        6
May       120           1         3       7            8        1
Jun       151           4         4      10           11        4
Jul       181           6         5      12           13        6
Aug       212           2         6      15           16        2
Sep       243           5         7      18           19        5
Oct       273           0         8      20           21        0
Nov       304           3         9      23           24        3
Dec       334           5        10      25           26        5
Jan yr+1  365           1

The 'yx effect is the result of yx being one less for Jan and Feb of a
given year.  Although the values added to 'D' by this formula plus the
yx +1 bump after March bear no resemblance to the actual day offset of
the first day of the month, when taken mod 7 the result is identical.
Thus if only the 'mm' part of the date changes, this term should give
the correct offsets to the day ordinal to transition from month to
month.
  The only remaining unexplained term is the '-2*cc' or '+5*cc'.  Every
time the century increases, as from 1999 to 2000, the year yy goes
from 99 back to 00.  This disrupts the effect of adding in yx and
b = yx/4 by making these values 100 and 25 less than they ought to be.
So each time the century increases by +1 we need to add in an extra
125.  But, since most centuries are not leap years, we really only want
to add 24, not 25 as the b term compensation.  (remember the cc/4 term
is handling the divisible by 400 exception).  Thus we need to add a
corrective term of '124*cc'.  But, in mod 7 arithmetic,
  124 * cc = 5 * cc = -2 * cc   (mod 7).

  The above demonstrates in a somewhat intuitive fashion, that if the
modified algorithm returns the correct day ordinal for one date, that
the day ordinal should be incremented correctly as the cc, yy, mm, and
dd values advance, so at worst we may need to add a constant term to
make things work for all dates.  Checking for a specific date shows that
no additional constant is required.  It's possible the above could be
converted into a rigorous proof of correctness for the modified
algorithm, but I didn't feel inclined to carry things quite that far.
                           Joel C. Ewing
                           Sr. Technical Admin, Mainframe Systems
                           Data-Tronics Corp.
                           Fort Smith, AR
